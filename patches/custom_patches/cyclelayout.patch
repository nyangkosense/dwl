diff --git a/config.def.h b/config.def.h
index 22d2171..e819d7c 100644
--- a/config.def.h
+++ b/config.def.h
@@ -139,6 +139,8 @@ static const Key keys[] = {
 	{ MODKEY,                    XKB_KEY_t,          setlayout,      {.v = &layouts[0]} },
 	{ MODKEY,                    XKB_KEY_f,          setlayout,      {.v = &layouts[1]} },
 	{ MODKEY,                    XKB_KEY_m,          setlayout,      {.v = &layouts[2]} },
+	{ MODKEY|WLR_MODIFIER_CTRL, XKB_KEY_comma,  	 cyclelayout,    {.i = -1} },
+    	{ MODKEY|WLR_MODIFIER_CTRL, XKB_KEY_period,      cyclelayout,    {.i = +1} },
 	{ MODKEY,                    XKB_KEY_space,      setlayout,      {0} },
 	{ MODKEY|WLR_MODIFIER_SHIFT, XKB_KEY_space,      togglefloating, {0} },
 	{ MODKEY,                    XKB_KEY_e,         togglefullscreen, {0} },
diff --git a/dwl.c b/dwl.c
index dc0c861..2588709 100644
--- a/dwl.c
+++ b/dwl.c
@@ -274,6 +274,7 @@ static void createpopup(struct wl_listener *listener, void *data);
 static void cursorconstrain(struct wlr_pointer_constraint_v1 *constraint);
 static void cursorframe(struct wl_listener *listener, void *data);
 static void cursorwarptohint(void);
+static void cyclelayout(const Arg *arg);
 static void destroydecoration(struct wl_listener *listener, void *data);
 static void destroydragicon(struct wl_listener *listener, void *data);
 static void destroyidleinhibitor(struct wl_listener *listener, void *data);
@@ -1167,6 +1168,33 @@ cursorwarptohint(void)
 	}
 }
 
+void
+cyclelayout(const Arg *arg) {
+
+	/* The NULL terminator (in config.def.h) was interfering with the IPC protocol 
+	because when dwlb would try to read/iterate through the layouts via IPC, 
+	it would encounter the NULL entry which wasn't expected by the protocol.
+	fix: use LENGTH(layouts) instead of checking for NULL */ 
+	
+    Layout *l;
+    size_t i = 0;   
+    
+    for(l = (Layout *)layouts; l != selmon->lt[selmon->sellt]; l++)
+        i++;
+
+    if(arg->i > 0) {
+        if(i + 1 < LENGTH(layouts))
+            setlayout(&((Arg) { .v = &layouts[i + 1] }));
+        else
+            setlayout(&((Arg) { .v = &layouts[0] }));
+    } else {
+        if(i > 0)
+            setlayout(&((Arg) { .v = &layouts[i - 1] }));
+        else
+            setlayout(&((Arg) { .v = &layouts[LENGTH(layouts) - 1] }));
+    }
+}
+
 void
 destroydecoration(struct wl_listener *listener, void *data)
 {
