From e8a4f2c8b9d3a5c6f701d2e4b8a9c0d3f2e1b5a8 Mon Sep 17 00:00:00 2001
From: Assistant <assistant@anthropic.com>
Date: Thu, 24 Oct 2024 12:00:00 +0000
Subject: [PATCH] Add gaps support to snail layout with vanitygaps integration

---
 dwl.c | 105 +++++++++++++++++++++++++++++++++-------------------------
 1 file changed, 59 insertions(+), 46 deletions(-)

diff --git a/dwl.c b/dwl.c
index 46bdca1..a158dd6 100644
--- a/dwl.c
+++ b/dwl.c
@@ -2659,8 +2659,8 @@ void
 snail(Monitor *m)
 {
 	int i = 0, n = 0;
-	unsigned int mw = m->w.width;
-	Client *c, *prev;
+	unsigned int mw = m->w.width, oe = enablegaps, ie = enablegaps, w, h;
+	Client *c, *prev = NULL;
 	enum wlr_direction dir = WLR_DIRECTION_RIGHT;
 
 	wl_list_for_each(c, &clients, link)
@@ -2668,9 +2668,12 @@ snail(Monitor *m)
 			n++;
 	if (n == 0)
 		return;
+	if (smartgaps == n)
+		oe = 0;
 
 	if (n > m->nmaster)
-		mw = m->nmaster ? ROUND(m->w.width * m->mfact) : 0;
+		mw = m->nmaster ? 
+			(unsigned int)round((m->w.width + m->gappiv*ie) * m->mfact) : 0;
 
 	wl_list_for_each(c, &clients, link) {
 		if (!VISIBLEON(c, m) || c->isfloating || c->isfullscreen)
@@ -2681,8 +2684,10 @@ snail(Monitor *m)
 		 * master area with this window
 		 */
 		if (mw > 0 && i == 0) {
-			c->geom = (struct wlr_box){.x = m->w.x, .y = m->w.y,
-				.width = mw, .height = m->w.height};
+			c->geom = (struct wlr_box){
+				.x = m->w.x + m->gappoh*oe, .y = m->w.y + m->gappov*oe,
+				.width = mw - 2*m->gappoh*oe, .height = m->w.height - 2*m->gappov*oe
+			};
 			/*
 			 * If the first window in the master area is wide, split it
 			 * horizontally and put next one on its right; otherwise, split it
@@ -2694,13 +2699,17 @@ snail(Monitor *m)
 		 * m->nmaster-th window
 		 */
 		} else if (i == m->nmaster) {
-			c->geom = (struct wlr_box){.x = m->w.x + mw, .y = m->w.y,
-				.width = m->w.width - mw, .height = m->w.height};
+			c->geom = (struct wlr_box){
+				.x = m->w.x + mw + m->gappoh*oe,
+				.y = m->w.y + m->gappov*oe,
+				.width = m->w.width - mw - 2*m->gappoh*oe,
+				.height = m->w.height - 2*m->gappov*oe
+			};
 			/*
 			 * If the first window in the stack is wide, split it horizontally
 			 * and put next one on its right; otherwise, split it vertically and
 			 * put the next one below it
 			 */
 			dir = c->geom.width > m->w.height ? WLR_DIRECTION_RIGHT : WLR_DIRECTION_DOWN;
-		/*
+		} else if (prev) {
+			/*
 		 * Split the previous horizontally and put the current window on the right
 		 */
-		} else if (dir == WLR_DIRECTION_RIGHT) {
-			c->geom = (struct wlr_box){.x = prev->geom.x + prev->geom.width / 2, .y = prev->geom.y,
-				.width = prev->geom.width / 2, .height = prev->geom.height};
-			prev->geom = (struct wlr_box){.x = prev->geom.x, .y = prev->geom.y,
-				.width = prev->geom.width / 2, .height = prev->geom.height};
+			if (dir == WLR_DIRECTION_RIGHT) {
+				w = (prev->geom.width - m->gappih*ie) / 2;
+				h = prev->geom.height;
+				c->geom = (struct wlr_box){
+					.x = prev->geom.x + prev->geom.width/2 + m->gappih*ie/2,
+					.y = prev->geom.y,
+					.width = w, .height = h
+				};
+				prev->geom.width = w;
 			/*
 			 * If it's a stack window or the first narrow window in the master
 			 * area, put the next one below it
 			 */
-			if (i >= m->nmaster || c->geom.width < m->w.height)
-				dir = WLR_DIRECTION_DOWN;
-		/*
-		 * Split the previous vertically and put the current window below it
-		 */
-		} else if (dir == WLR_DIRECTION_DOWN) {
-			c->geom = (struct wlr_box){.x = prev->geom.x, .y = prev->geom.y + prev->geom.height / 2,
-				.width = prev->geom.width, .height = prev->geom.height / 2};
-			prev->geom = (struct wlr_box){.x = prev->geom.x, .y = prev->geom.y,
-				.width = prev->geom.width, .height = prev->geom.height / 2};
-			dir = WLR_DIRECTION_LEFT;
-		/*
-		 * Split the previous horizontally and put the current window on the left
-		 */
-		} else if (dir == WLR_DIRECTION_LEFT) {
-			c->geom = (struct wlr_box){.x = prev->geom.x, .y = prev->geom.y,
-				.width = prev->geom.width / 2, .height = prev->geom.height};
-			prev->geom = (struct wlr_box){.x = prev->geom.x + prev->geom.width / 2, .y = prev->geom.y,
-				.width = prev->geom.width / 2, .height = prev->geom.height};
-			dir = WLR_DIRECTION_UP;
-		/*
-		 * Split the previous vertically and put the current window above it
-		 */
-		} else {
-			c->geom = (struct wlr_box){.x = prev->geom.x, .y = prev->geom.y,
-				.width = prev->geom.width, .height = prev->geom.height / 2};
-			prev->geom = (struct wlr_box){.x = prev->geom.x, .y = prev->geom.y + prev->geom.height / 2,
-				.width = prev->geom.width, .height = prev->geom.height / 2};
-			dir = WLR_DIRECTION_RIGHT;
+				if (i >= m->nmaster || c->geom.width < m->w.height)
+					dir = WLR_DIRECTION_DOWN;
+			} else if (dir == WLR_DIRECTION_DOWN) {
+				w = prev->geom.width;
+				h = (prev->geom.height - m->gappiv*ie) / 2;
+				c->geom = (struct wlr_box){
+					.x = prev->geom.x,
+					.y = prev->geom.y + prev->geom.height/2 + m->gappiv*ie/2,
+					.width = w, .height = h
+				};
+				prev->geom.height = h;
+				dir = WLR_DIRECTION_LEFT;
+			} else if (dir == WLR_DIRECTION_LEFT) {
+				w = (prev->geom.width - m->gappih*ie) / 2;
+				h = prev->geom.height;
+				c->geom = (struct wlr_box){
+					.x = prev->geom.x,
+					.y = prev->geom.y,
+					.width = w, .height = h
+				};
+				prev->geom.x += w + m->gappih*ie;
+				prev->geom.width = w;
+				dir = WLR_DIRECTION_UP;
+			} else {
+				w = prev->geom.width;
+				h = (prev->geom.height - m->gappiv*ie) / 2;
+				c->geom = (struct wlr_box){
+					.x = prev->geom.x,
+					.y = prev->geom.y,
+					.width = w, .height = h
+				};
+				prev->geom.y += h + m->gappiv*ie;
+				prev->geom.height = h;
+				dir = WLR_DIRECTION_RIGHT;
+			}
 		}
 		i++;
 		prev = c;
-- 
2.46.0
